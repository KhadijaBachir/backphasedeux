<?php

namespace App\Http\Controllers;

use App\Models\Hotel;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Storage;
use Illuminate\Validation\ValidationException;

class HotelController extends Controller
{
    /**
     * Afficher la liste des h√¥tels
     */
    public function index(Request $request)
    {
        try {
            // Si l'utilisateur est authentifi√©, retourner ses h√¥tels
            if ($request->user()) {
                $hotels = $request->user()->hotels()->with('user')->get();
            } else {
                // Sinon, retourner tous les h√¥tels (pour consultation publique)
                $hotels = Hotel::with('user')->get();
            }

            return response()->json($hotels, 200);
        } catch (\Exception $e) {
            \Log::error('Erreur r√©cup√©ration h√¥tels: ' . $e->getMessage());
            return response()->json(['message' => 'Erreur serveur'], 500);
        }
    }

    /**
     * Enregistrer un nouvel h√¥tel
     */
    public function store(Request $request)
    {
        \Log::info('üîç D√âBUT Cr√©ation h√¥tel', ['user_id' => $request->user()->id]);
        
        try {
            \Log::info('üì• Donn√©es re√ßues:', $request->all());

            $validated = $request->validate([
                'name' => 'required|string|max:255',
                'address' => 'required|string|max:500',
                'email' => 'nullable|email|max:255',
                'phone' => 'nullable|string|max:20',
                'price_per_night' => 'required|numeric|min:0|max:999999.99',
                'currency' => 'required|string|in:F XOF,‚Ç¨ EUR,$ USD',
                'photo' => 'nullable|image|mimes:jpeg,png,jpg,gif,webp|max:5120',
            ]);

            \Log::info('‚úÖ Donn√©es valid√©es:', $validated);

            // Gestion de l'upload de la photo
            if ($request->hasFile('photo')) {
                \Log::info('üì∏ Fichier photo d√©tect√©', [
                    'name' => $request->file('photo')->getClientOriginalName(),
                    'size' => $request->file('photo')->getSize(),
                    'mime' => $request->file('photo')->getMimeType()
                ]);
                
                $validated['photo'] = $request->file('photo')->store('hotels', 'public');
                \Log::info('üíæ Photo sauvegard√©e:', ['path' => $validated['photo']]);
            }

            \Log::info('üíæ Cr√©ation en base de donn√©es...');
            $hotel = $request->user()->hotels()->create($validated);
            $hotel->load('user');

            \Log::info('üéâ H√¥tel cr√©√© avec succ√®s:', [
                'hotel_id' => $hotel->id,
                'name' => $hotel->name,
                'price' => $hotel->price_per_night,
                'currency' => $hotel->currency,
                'photo_path' => $hotel->photo
            ]);

            return response()->json([
                'message' => 'H√¥tel cr√©√© avec succ√®s',
                'hotel' => $hotel
            ], 201);

        } catch (ValidationException $ve) {
            \Log::error('‚ùå Erreur validation h√¥tel:', ['errors' => $ve->errors()]);
            return response()->json([
                'message' => 'Erreur de validation',
                'errors' => $ve->errors()
            ], 422);
        } catch (\Exception $e) {
            \Log::error('üí• Erreur cr√©ation h√¥tel:', [
                'message' => $e->getMessage(),
                'file' => $e->getFile(),
                'line' => $e->getLine()
            ]);
            return response()->json([
                'message' => 'Erreur lors de la cr√©ation de l\'h√¥tel: ' . $e->getMessage()
            ], 500);
        }
    }

    /**
     * Afficher un h√¥tel sp√©cifique
     */
    public function show(Request $request, $id)
    {
        try {
            $hotel = Hotel::with('user')->find($id);

            if (!$hotel) {
                return response()->json(['message' => 'H√¥tel non trouv√©'], 404);
            }

            // V√©rifier que l'utilisateur peut voir cet h√¥tel
            if ($request->user() && $hotel->user_id !== $request->user()->id) {
                return response()->json(['message' => 'Non autoris√©'], 403);
            }

            return response()->json($hotel, 200);

        } catch (\Exception $e) {
            \Log::error('Erreur affichage h√¥tel: ' . $e->getMessage());
            return response()->json(['message' => 'Erreur serveur'], 500);
        }
    }

    /**
     * Mettre √† jour un h√¥tel
     */
    public function update(Request $request, $id)
    {
        \Log::info('üîç D√âBUT Mise √† jour h√¥tel', ['hotel_id' => $id, 'user_id' => $request->user()->id]);
        
        try {
            $hotel = Hotel::find($id);

            if (!$hotel) {
                return response()->json(['message' => 'H√¥tel non trouv√©'], 404);
            }

            // V√©rifier que l'utilisateur peut modifier cet h√¥tel
            if ($hotel->user_id !== $request->user()->id) {
                return response()->json(['message' => 'Non autoris√©'], 403);
            }

            \Log::info('üì• Donn√©es re√ßues pour mise √† jour:', $request->all());

            $validated = $request->validate([
                'name' => 'sometimes|required|string|max:255',
                'address' => 'sometimes|required|string|max:500',
                'email' => 'nullable|email|max:255',
                'phone' => 'nullable|string|max:20',
                'price_per_night' => 'sometimes|required|numeric|min:0|max:999999.99',
                'currency' => 'sometimes|required|string|in:F XOF,‚Ç¨ EUR,$ USD',
                'photo' => 'nullable|image|mimes:jpeg,png,jpg,gif,webp|max:5120',
            ]);

            \Log::info('‚úÖ Donn√©es valid√©es pour mise √† jour:', $validated);

            // Gestion de l'upload de la nouvelle photo
            if ($request->hasFile('photo')) {
                \Log::info('üì∏ Nouvelle photo d√©tect√©e');
                
                // Supprimer l'ancienne photo si elle existe
                if ($hotel->photo) {
                    $oldPhotoPath = $hotel->getRawPhotoPath();
                    if ($oldPhotoPath && Storage::disk('public')->exists($oldPhotoPath)) {
                        Storage::disk('public')->delete($oldPhotoPath);
                        \Log::info('üóëÔ∏è Ancienne photo supprim√©e:', ['path' => $oldPhotoPath]);
                    }
                }
                $validated['photo'] = $request->file('photo')->store('hotels', 'public');
                \Log::info('üíæ Nouvelle photo sauvegard√©e:', ['path' => $validated['photo']]);
            }

            // Mettre √† jour l'h√¥tel
            $hotel->update($validated);
            
            // CORRECTION FORC√âE : Recharger depuis la base avec une nouvelle requ√™te
            $hotel = Hotel::with('user')->find($id);

            \Log::info('‚úÖ H√¥tel mis √† jour avec succ√®s:', [
                'hotel_id' => $hotel->id,
                'name' => $hotel->name,
                'address' => $hotel->address,
                'email' => $hotel->email,
                'phone' => $hotel->phone,
                'price_per_night' => $hotel->price_per_night,
                'currency' => $hotel->currency,
                'photo_path' => $hotel->photo,
                'photo_raw' => $hotel->getRawOriginal('photo')
            ]);

            return response()->json([
                'message' => 'H√¥tel mis √† jour avec succ√®s',
                'hotel' => $hotel
            ], 200);

        } catch (ValidationException $ve) {
            \Log::error('‚ùå Erreur validation mise √† jour h√¥tel:', ['errors' => $ve->errors()]);
            return response()->json([
                'message' => 'Erreur de validation',
                'errors' => $ve->errors()
            ], 422);
        } catch (\Exception $e) {
            \Log::error('üí• Erreur mise √† jour h√¥tel:', [
                'message' => $e->getMessage(),
                'file' => $e->getFile(),
                'line' => $e->getLine()
            ]);
            return response()->json([
                'message' => 'Erreur lors de la mise √† jour de l\'h√¥tel: ' . $e->getMessage()
            ], 500);
        }
    }

    /**
     * Supprimer un h√¥tel
     */
    public function destroy(Request $request, $id)
    {
        try {
            $hotel = Hotel::find($id);

            if (!$hotel) {
                return response()->json(['message' => 'H√¥tel non trouv√©'], 404);
            }

            // V√©rifier que l'utilisateur peut supprimer cet h√¥tel
            if ($hotel->user_id !== $request->user()->id) {
                return response()->json(['message' => 'Non autoris√©'], 403);
            }

            // Supprimer la photo si elle existe
            if ($hotel->photo) {
                $photoPath = $hotel->getRawPhotoPath();
                if ($photoPath && Storage::disk('public')->exists($photoPath)) {
                    Storage::disk('public')->delete($photoPath);
                    \Log::info('üóëÔ∏è Photo supprim√©e:', ['path' => $photoPath]);
                }
            }

            $hotel->delete();

            \Log::info('‚úÖ H√¥tel supprim√© avec succ√®s:', ['hotel_id' => $id]);

            return response()->json([
                'message' => 'H√¥tel supprim√© avec succ√®s'
            ], 200);

        } catch (\Exception $e) {
            \Log::error('Erreur suppression h√¥tel: ' . $e->getMessage());
            return response()->json([
                'message' => 'Erreur lors de la suppression de l\'h√¥tel'
            ], 500);
        }
    }
}